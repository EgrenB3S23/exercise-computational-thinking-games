let numOfPlayers = 3;
let numOfDice = 3;
let rollsTable = [];
let winner = undefined;

window.addEventListener("load", function () {
	numOfPlayers = prompt("Enter number of players", 3);
	numOfDice = prompt("Enter number of dice per player", 3);

	// generate rollsTable:
	console.log("Generating starting rolls...");
	for (let i = 0; i < numOfPlayers; i++) {
		rollsTable.push(rollDice(numOfDice, true));
		let score = arrSum(rollsTable[i]);

		// console.log(`Player ${i + 1} rolls: [${rollsTable[i]}] = ${arrSum(rollsTable[i])}`);
		console.log(`Player ${i + 1} rolls: [${rollsTable[i]}]`);
	}

	//print scores before rerolling
	for (let i = 0; i < rollsTable.length; i++) {
		console.log(`Player ${i + 1} starting score: ${arrSum(rollsTable[i])}`);
	}

	// Each player rerolls their worst 2 dice, then rerolls the single worst die.
	for (let i = 0; i < rollsTable.length; i++) {
		rollsTable[i] = rerollFirstNItems(rollsTable[i], 2, true);
		console.log(`Rerolled lowest 2 for Player ${i + 1}: [${rollsTable[i]}]`);
	}
	for (let i = 0; i < rollsTable.length; i++) {
		rollsTable[i] = rerollFirstNItems(rollsTable[i], 1, true);
		console.log(`Rerolled lowest 1 for Player ${i + 1}: [${rollsTable[i]}]`);
	}

	// for each player, print new rolls & final score.
	for (let i = 0; i < rollsTable.length; i++) {
		console.log(`Player ${i + 1}'s new rolls: [${rollsTable[i]}] = ${arrSum(rollsTable[i])}`);
		// console.log(arrSum(rollsTable[i]));
	}

	// determine winner:
	let indexOfLeaderSoFar = -1;
	let topScore = 0;
	let isTied = false;
	console.log("comparing final scores...");
	for (let i = 0; i < numOfPlayers; i++) {
		if (arrSum(rollsTable[i]) >= topScore) {
			if (arrSum(rollsTable[i]) > topScore) {
				indexOfLeaderSoFar = i;
				isTied = false;
				// console.log(`New highest score found: Player ${indexOfLeaderSoFar + 1} with score = ${arrSum(rollsTable[i])}`);
			} else {
				indexOfLeaderSoFar = -1;
				isTied = true;
				// console.log("This might end in a tie...");
			}
			topScore = arrSum(rollsTable[i]);
		}
	}
	if (isTied) {
		console.log(`The game is a tie at ${topScore} points! No winners. We can't cut the medal in half. I'm sure you all understand. Better luck next time!`);
	} else {
		console.log(`Player ${indexOfLeaderSoFar + 1} won with a score of ${arrSum(rollsTable[indexOfLeaderSoFar])}!`);
	}
});

// returns an array with n random numbers, either sorted or unsorted:
function rollDice(n, sorted = false) {
	let arr = [];
	for (let i = 0; i < n; i++) {
		arr.push(1 + Math.floor(Math.random() * 6));
	}
	if (sorted) {
		arr.sort(function (a, b) {
			return a - b;
		});
	}
	return arr;
}

// rerolls the first n elements of arr and returns the result, either sorted or unsorted:
function rerollFirstNItems(arr, n, sorted = false) {
	// if we are trying to replace more numbers than there are, just return all new numbers instead, nothing more to do.
	if (n > arr.length) {
		return rollDice(n, true);
	}

	// variant 1, old - multiple rollDice(1) calls:
	/*
	for (let i = 0; i < n; i++) {
	 	arr[i] = rollDice(1)[0]; //rollDice(1) returns an array. We want the integer inside of it, hence we need to use rollDice(1)[0].
	}
	*/

	// variant 2 - single rollDice(n) call, then splice:
	let newRolls = rollDice(n);
	arr.splice(0, n, ...rollDice(n)); // replaces the first n elements of arr with new ones from the array generated by rollDice(n).

	// console.log(`Unsorted result:\t${arr}`);
	if (sorted) {
		arr.sort(function (a, b) {
			return a - b;
		});
	}
	return arr;
}

// returns sum of arr items:
function arrSum(arr) {
	let sum = 0;
	for (const i of arr) {
		sum = parseInt(sum) + parseInt(i);
	}
	return sum;
}
